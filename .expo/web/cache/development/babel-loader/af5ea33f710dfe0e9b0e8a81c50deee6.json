{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _appColors = require(\"../../utils/appColors\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityaarirvan/Desktop/expo app/modified app/app/components/AvatarImage/index.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar defaultSize = 64;\n\nvar AvatarImage = function AvatarImage(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      source = _ref.source,\n      style = _ref.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"size\", \"source\", \"style\"]);\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? _appColors.appColors.primary : _ref2$backgroundColor;\n\n  return React.createElement(_reactNative.View, (0, _extends2.default)({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, style]\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), typeof source === 'function' && source({\n    size: size\n  }), typeof source !== 'function' && React.createElement(_reactNative.Image, {\n    source: source,\n    style: {\n      width: size,\n      height: size,\n      borderRadius: size / 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }));\n};\n\nAvatarImage.displayName = 'Avatar.Image';\nvar _default = AvatarImage;\nexports.default = _default;","map":{"version":3,"sources":["/Users/adityaarirvan/Desktop/expo app/modified app/app/components/AvatarImage/index.js"],"names":["defaultSize","AvatarImage","size","source","style","rest","StyleSheet","flatten","backgroundColor","appColors","primary","width","height","borderRadius","displayName"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAQA;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,EAApB;;AAsBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAKd;AAAA,uBAJFC,IAIE;AAAA,MAJFA,IAIE,0BAJKF,WAIL;AAAA,MAHFG,MAGE,QAHFA,MAGE;AAAA,MAFFC,KAEE,QAFFA,KAEE;AAAA,MADCC,IACD;;AAAA,cAE8CC,wBAAWC,OAAX,CAAmBH,KAAnB,KAA6B,EAF3E;AAAA,oCAEMI,eAFN;AAAA,MAEMA,eAFN,sCAEwBC,qBAAUC,OAFlC;;AAIF,SACI,oBAAC,iBAAD;AACI,IAAA,KAAK,EAAE,CACH;AACIC,MAAAA,KAAK,EAAET,IADX;AAEIU,MAAAA,MAAM,EAAEV,IAFZ;AAGIW,MAAAA,YAAY,EAAEX,IAAI,GAAG,CAHzB;AAIIM,MAAAA,eAAe,EAAfA;AAJJ,KADG,EAOHJ,KAPG;AADX,KAUQC,IAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYK,OAAOF,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC;AAAED,IAAAA,IAAI,EAAJA;AAAF,GAAD,CAZ3C,EAaK,OAAOC,MAAP,KAAkB,UAAlB,IACG,oBAAC,kBAAD;AACI,IAAA,MAAM,EAAEA,MADZ;AAEI,IAAA,KAAK,EAAE;AAAEQ,MAAAA,KAAK,EAAET,IAAT;AAAeU,MAAAA,MAAM,EAAEV,IAAvB;AAA6BW,MAAAA,YAAY,EAAEX,IAAI,GAAG;AAAlD,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdR,CADJ;AAsBH,CA/BD;;AAiCAD,WAAW,CAACa,WAAZ,GAA0B,cAA1B;eAEeb,W","sourcesContent":["import * as React from 'react';\nimport {\n    Image,\n    ImageSourcePropType,\n    StyleSheet,\n    View,\n    ViewStyle,\n    StyleProp,\n} from 'react-native';\nimport { appColors } from '../../utils/appColors';\n\nconst defaultSize = 64;\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-image.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />\n * );\n * export default MyComponent\n * ```\n */\nconst AvatarImage = ({\n    size = defaultSize,\n    source,\n    style,\n    ...rest\n}) => {\n\n    const { backgroundColor = appColors.primary } = StyleSheet.flatten(style) || {};\n\n    return (\n        <View\n            style={[\n                {\n                    width: size,\n                    height: size,\n                    borderRadius: size / 2,\n                    backgroundColor,\n                },\n                style,\n            ]}\n            {...rest}\n        >\n            {typeof source === 'function' && source({ size })}\n            {typeof source !== 'function' && (\n                <Image\n                    source={source}\n                    style={{ width: size, height: size, borderRadius: size / 2 }}\n                />\n            )}\n        </View>\n    );\n};\n\nAvatarImage.displayName = 'Avatar.Image';\n\nexport default AvatarImage"]},"metadata":{},"sourceType":"script"}